import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:vlogify/core/common/image_display.dart';
import 'package:vlogify/core/constants/constants.dart';
import 'package:vlogify/core/enums/enums.dart';
import 'package:vlogify/controllers/auth_controller.dart';
import 'package:vlogify/features/post/controller/post_controller.dart';
import 'package:vlogify/models/vlog_model.dart';
import 'package:vlogify/responsive/responsive.dart';
import 'package:vlogify/theme/pallete.dart';
import 'package:routemaster/routemaster.dart';

class VlogCard extends ConsumerWidget {
  final Vlog vlog;
  const VlogCard({
    super.key,
    required this.vlog,
  });

  void deleteVlog(WidgetRef ref, BuildContext context) async {
    ref.read(postControllerProvider.notifier).deletePost(vlog, context);
  }

  void upvoteVlog(WidgetRef ref) async {
    ref.read(postControllerProvider.notifier).upvote(vlog);
  }

  void downvoteVlog(WidgetRef ref) async {
    ref.read(postControllerProvider.notifier).downvote(vlog);
  }

  void navigateToUser(BuildContext context) {
    Routemaster.of(context).push('/u/${vlog.uid}');
  }

  void navigateToBoard(BuildContext context) {
    Routemaster.of(context).push('/b/${vlog.boardName}');
  }

  void navigateToComments(BuildContext context) {
    Routemaster.of(context).push('/vlog/${vlog.id}/comments');
  }

  void showImage(BuildContext context, String imagePath, ImageType imageType) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) => ImageDisplayWidget(
        imagePath: imagePath,
        imageType: imageType,
      ),
    );
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final user = ref.watch(userProvider)!;
    final currentTheme = ref.watch(themeNotifierProvider);

    return Responsive(
      child: Column(
        children: [
          Container(
            decoration: BoxDecoration(
              color: currentTheme.drawerTheme.backgroundColor,
            ),
            padding: const EdgeInsets.symmetric(vertical: 10),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                if (kIsWeb)
                  Column(
                    children: [
                      IconButton(
                        onPressed: () => upvoteVlog(ref),
                        icon: Icon(
                          Constants.up,
                          size: 30,
                          color: vlog.upvotes.contains(user.uid)
                              ? Pallete.redColor
                              : null,
                        ),
                      ),
                      Text(
                        '${vlog.upvotes.length - vlog.downvotes.length == 0 ? 'Vote' : vlog.upvotes.length - vlog.downvotes.length}',
                        style: const TextStyle(fontSize: 17),
                      ),
                      IconButton(
                        onPressed: () => downvoteVlog(ref),
                        icon: Icon(
                          Constants.down,
                          size: 30,
                          color: vlog.downvotes.contains(user.uid)
                              ? Pallete.blueColor
                              : null,
                        ),
                      ),
                    ],
                  ),
                Expanded(
                  child: Column(
                    children: [
                      Container(
                        padding: const EdgeInsets.symmetric(
                          vertical: 4,
                          horizontal: 16,
                        ).copyWith(right: 0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Row(
                                  children: [
                                    GestureDetector(
                                      onTap: () => navigateToBoard(context),
                                      child: const CircleAvatar(
                                        backgroundImage: NetworkImage(
                                            // TODO
                                            Constants.avatarDefault
                                            // vlog.communityProfilePic,
                                            ),
                                        radius: 16,
                                      ),
                                    ),
                                    Padding(
                                      padding: const EdgeInsets.only(left: 8),
                                      child: Column(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.start,
                                        children: [
                                          Text(
                                            'r/${vlog.boardName}',
                                            style: const TextStyle(
                                              fontSize: 16,
                                              fontWeight: FontWeight.bold,
                                            ),
                                          ),
                                          GestureDetector(
                                            onTap: () =>
                                                navigateToUser(context),
                                            child: Text(
                                              'u/${vlog.username}',
                                              style:
                                                  const TextStyle(fontSize: 12),
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                                if (vlog.uid == user.uid)
                                  IconButton(
                                    onPressed: () => deleteVlog(ref, context),
                                    icon: Icon(
                                      Icons.delete,
                                      color: Pallete.redColor,
                                    ),
                                  ),
                              ],
                            ),
                            Text(
                              DateFormat('yMMMd').format(
                                  vlog.createdAt), // Adjust style as needed
                            ),
                            Padding(
                              padding: const EdgeInsets.only(top: 10.0),
                              child: Text(
                                vlog.title,
                                style: const TextStyle(
                                  fontSize: 19,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                            GestureDetector(
                              onTap: () => showImage(
                                  context, vlog.link, ImageType.network),
                              child: SizedBox(
                                height:
                                    MediaQuery.of(context).size.height * 0.35,
                                width: double.infinity,
                                child: Image.network(
                                  vlog.link,
                                  fit: BoxFit.cover,
                                ),
                              ),
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                if (!kIsWeb)
                                  Row(
                                    children: [
                                      IconButton(
                                        onPressed: isGuest
                                            ? () {}
                                            : () => upvoteVlog(ref),
                                        icon: Icon(
                                          Constants.up,
                                          size: 30,
                                          color: vlog.upvotes.contains(user.uid)
                                              ? Pallete.redColor
                                              : null,
                                        ),
                                      ),
                                      Text(
                                        '${vlog.upvotes.length - vlog.downvotes.length == 0 ? 'Vote' : vlog.upvotes.length - vlog.downvotes.length}',
                                        style: const TextStyle(fontSize: 17),
                                      ),
                                      IconButton(
                                        onPressed: isGuest
                                            ? () {}
                                            : () => downvoteVlog(ref),
                                        icon: Icon(
                                          Constants.down,
                                          size: 30,
                                          color:
                                              vlog.downvotes.contains(user.uid)
                                                  ? Pallete.blueColor
                                                  : null,
                                        ),
                                      ),
                                    ],
                                  ),
                                Row(
                                  children: [
                                    IconButton(
                                      onPressed: () =>
                                          navigateToComments(context),
                                      icon: const Icon(
                                        Icons.comment,
                                      ),
                                    ),
                                    Text(
                                      '${vlog.commentCount == 0 ? 'Comment' : vlog.commentCount}',
                                      style: const TextStyle(fontSize: 17),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 10),
        ],
      ),
    );
  }
}
